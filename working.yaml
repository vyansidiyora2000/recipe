AWSTemplateFormatVersion: '2010-09-09'
Description: Full Application Setup with Cognito, Lambda, and API Gateway

Parameters:
  VpcCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR Block for Public Subnet 1
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: CIDR Block for Public Subnet 2
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: CIDR Block for Private Subnet 1
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: CIDR Block for Private Subnet 2
    Type: String
    Default: 10.0.4.0/24

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: new

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: RecipeAppVPC-v2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: RecipeApp-IGW-v2

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-Route-Table-v2

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-Route-Table-v2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1-v2

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-2-v2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-1-v2

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-2-v2

  # Security Groups
  frontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for frontend instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  backendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for backend instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref backendSecurityGroup

  # RDS Resources
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instances
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: recipedb01-4
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '17.2'
      MasterUsername: postgres
      MasterUserPassword: 12345678
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: false
      DBName: RecipeDatabase
      BackupRetentionPeriod: 7

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: b00979170-vyansi-v2
      AutoVerifiedAttributes:
        - email 
      UsernameAttributes:
        - email
      EmailVerificationMessage: 'Please verify your email address for my-app: {####}'
      EmailVerificationSubject: 'Verify your email for my-app'

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: job-b00979170-v2
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: job-client-v2
      UserPoolId: !Ref CognitoUserPool  

  # Lambda Function
  AddUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserFunction-v2
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Role: arn:aws:iam::067699391637:role/LabRole
      Code:
        S3Bucket: b00979170
        S3Key: UserFunction.zip
      Timeout: 30
      MemorySize: 256

  # DynamoDB Table
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: User_Details_v2
      AttributeDefinitions:   
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Recipe11-v2
      Description: API Gateway for my application
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  FrontendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      SecurityGroupIds:
        - !Ref frontendSecurityGroup
      SubnetId: !Ref PublicSubnet1
      ImageId: ami-0453ec754f44f9a4a
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          sudo dnf update -y
          sudo dnf install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
          echo "VITE_AUTH_API_URL=https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/test" >> .env
          echo "VITE_APP_API_URL=http://${BackendInstance.PublicDnsName}:5000" >> .env
          echo "VITE_COGNITO_USER_POOL_ID=${CognitoUserPool}" >> .env
          echo "VITE_COGNITO_CLIENT_ID=${CognitoUserPoolClient}" >> .env
          echo "VITE_COGNITO_DOMAIN=https://${CognitoUserPoolDomain}.auth.us-east-1.amazoncognito.com" >> .env
          docker run --env-file .env -d -p 80:5173 vyansidiyora2482/frontend-image

  BackendInstance:
    Type: AWS::EC2::Instance
    DependsOn: RDSInstance
    Properties:
      InstanceType: t2.small
      SecurityGroupIds:
        - !Ref backendSecurityGroup
      SubnetId: !Ref PrivateSubnet1
      ImageId: ami-0453ec754f44f9a4a
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          sudo dnf update -y
          sudo dnf install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker        
          echo "DATABASE_URL=postgresql://postgres:12345678@${RDSInstance.Endpoint.Address}:5432/RecipeDatabase" >> .env
          echo "API_KEY=92560bb09b1d41eeb28bea46817849c7" >> .env
          echo "COGNITO_USER_POOL_ID=${CognitoUserPool}" >> .env
          echo "COGNITO_CLIENT_ID=${CognitoUserPoolClient}" >> .env
          echo "COGNITO_REGION=us-east-1" >> .env
          docker run --env-file .env -d -p 5000:5000 vyansidiyora2482/backend-image

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2

  RDSEndpoint:
    Description: RDS Instance Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address

  CognitoUserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref CognitoUserPool

  CognitoUserPoolDomain:
    Description: Domain name for the Cognito User Pool
    Value: !Ref CognitoUserPoolDomain